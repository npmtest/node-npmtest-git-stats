{"/home/travis/build/npmtest/node-npmtest-git-stats/test.js":"/* istanbul instrument in package npmtest_git_stats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-stats/lib.npmtest_git_stats.js":"/* istanbul instrument in package npmtest_git_stats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_stats = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_stats = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-stats/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-stats && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_stats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_stats\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_stats.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_stats.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_stats.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_stats.__dirname + '/lib.npmtest_git_stats.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-stats/node_modules/git-stats/lib/index.js":"\"use strict\";\n\nvar Ul = require(\"ul\"),\n    Abs = require(\"abs\"),\n    ReadJson = require(\"r-json\"),\n    WriteJson = require(\"w-json\"),\n    Moment = require(\"moment\"),\n    Gry = require(\"gry\"),\n    IsThere = require(\"is-there\"),\n    CliPie = require(\"cli-pie\"),\n    CliGhCal = require(\"cli-gh-cal\"),\n    GitLogParser = require(\"gitlog-parser\").parse,\n    ChildProcess = require(\"child_process\"),\n    Deffy = require(\"deffy\"),\n    Typpy = require(\"typpy\"),\n    Exec = ChildProcess.exec,\n    Spawn = ChildProcess.spawn,\n    IterateObject = require(\"iterate-object\");\n\n// Constants\nvar DATE_FORMAT = \"MMM D, YYYY\",\n    DEFAULT_STORE = Abs(\"~/.git-stats\"),\n    DEFAULT_DATA = {\n    commits: {}\n},\n    CONFIG_PATH = Abs(\"~/.git-stats-config.js\");\n\n/**\n * GitStats\n *\n * @name GitStats\n * @function\n * @param {String} dataPath Path to the data file.\n * @return {GitStats} The `GitStats` instance.\n */\nfunction GitStats(dataPath) {\n    this.path = Abs(Deffy(dataPath, DEFAULT_STORE));\n    this.config = {};\n}\n\n// Defaults\nGitStats.CONFIG_PATH = CONFIG_PATH;\nGitStats.DEFAULT_CONFIG = {\n    // Dark theme by default\n    theme: \"DARK\"\n\n    // This defaults in library\n    , path: undefined\n\n    // This defaults in cli-gh-cal\n    , first_day: undefined\n\n    // This defaults to *one year ago*\n    , since: undefined\n\n    // This defaults to *now*\n    , until: undefined\n\n    // Don't show authors by default\n    , authors: false\n\n    // No global activity by default\n    , global_activity: false\n};\n\n/**\n * getConfig\n * Fetches the configuration object from file (`~/.git-stats-config.js`).\n *\n * @name getConfig\n * @function\n * @param {Function} callback The callback function.\n * @return {Object|Undefined} If no callback is provided, the configuration object will be returned.\n */\nGitStats.prototype.getConfig = function (callback) {\n    var data = {},\n        err = null;\n\n    try {\n        data = require(CONFIG_PATH);\n    } catch (err) {\n        if (err.code === \"MODULE_NOT_FOUND\") {\n            err = null;\n            data = {};\n        }\n    }\n\n    if (callback) {\n        return callback(err, data);\n    } else {\n        if (err) {\n            throw err;\n        }\n    }\n\n    return data;\n};\n\n/**\n * initConfig\n * Inits the configuration field (`this.config`).\n *\n * @name initConfig\n * @function\n * @param {Object|String} input The path to a custom git-stats configuration file or the configuration object.\n * @param {Function} callback The callback function.\n */\nGitStats.prototype.initConfig = function (input, callback) {\n\n    var self = this;\n\n    if (Typpy(input, Function)) {\n        callback = input;\n        input = null;\n    }\n\n    input = input || CONFIG_PATH;\n\n    // Handle object input\n    if (Typpy(input, Object)) {\n        this.config = Ul.deepMerge(input, GitStats.DEFAULT_CONFIG);\n        callback && callback(null, this.config);\n        return this.config;\n    }\n\n    if (callback) {\n        this.getConfig(function (err, data) {\n            if (err) {\n                return callback(err);\n            }\n            self.initConfig(data, callback);\n        });\n    } else {\n        this.initConfig(this.getConfig());\n    }\n};\n\n/**\n * record\n * Records a new commit.\n *\n * @name record\n * @function\n * @param {Object} data The commit data containing:\n *\n *  - `date` (String|Date): The date object or a string in a format that can be parsed.\n *  - `url` (String): The repository remote url.\n *  - `hash` (String): The commit hash.\n *  - `_data` (Object): If this field is provided, it should be the content of the git-stats data file as object. It will be modified in-memory and then returned.\n *  - `save` (Boolean): If `false`, the result will *not* be saved in the file.\n *\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.record = function (data, callback) {\n\n    var self = this;\n\n    // Validate data\n    callback = callback || function (err) {\n        if (err) throw err;\n    };\n    data = Object(data);\n\n    if (typeof data.date === \"string\") {\n        data.date = new Moment(new Date(data.date));\n    }\n\n    if (!/^moment|date$/.test(Typpy(data.date))) {\n        callback(new Error(\"The date field should be a string or a date object.\"));\n        return GitStats;\n    } else if (Typpy(data.date, Date)) {\n        data.date = Moment(data.date);\n    }\n\n    if (typeof data.hash !== \"string\" || !data.hash) {\n        callback(new Error(\"Invalid hash.\"));\n        return GitStats;\n    }\n\n    // This is not used, but remains here just in case we need\n    // it in the future\n    if (typeof data.url !== \"string\" || !data.url) {\n        delete data.url;\n    }\n\n    function modify(err, stats) {\n\n        var commits = stats.commits,\n            day = data.date.format(DATE_FORMAT),\n            today = commits[day] = Object(commits[day]);\n\n        today[data.hash] = 1;\n\n        if (data.save === false) {\n            callback(null, stats);\n        } else {\n            self.save(stats, callback);\n        }\n\n        return stats;\n    }\n\n    // Check if we have input data\n    if (data._data) {\n        return modify(null, data._data);\n    } else {\n        // Get stats\n        self.get(modify);\n    }\n\n    return self;\n};\n\n/**\n * removeCommit\n * Deletes a specifc commit from the history.\n *\n * @name record\n * @function\n * @param {Object} data The commit data containing:\n *\n *  - `date` (String|Date): The date object or a string in a format that can be parsed. If not provided, the hash object will be searched in all dates.\n *  - `hash` (String): The commit hash.\n *  - `_data` (Object): If this field is provided, it should be the content of the git-stats data file as object. It will be modified in-memory and then returned.\n *  - `save` (Boolean): If `false`, the result will *not* be saved in the file.\n *\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.removeCommit = function (data, callback) {\n\n    var self = this;\n\n    // Validate data\n    callback = callback || function (err) {\n        if (err) throw err;\n    };\n    data = Object(data);\n\n    if (typeof data.date === \"string\") {\n        data.date = new Moment(new Date(data.date));\n    }\n\n    if (!/^moment|date$/.test(Typpy(data.date))) {\n        data.date = null;\n    } else if (Typpy(data.date, Date)) {\n        data.date = Moment(data.date);\n    }\n\n    if (typeof data.hash !== \"string\" || !data.hash) {\n        callback(new Error(\"Invalid hash.\"));\n        return GitStats;\n    }\n\n    function modify(err, stats) {\n\n        if (err) {\n            return callback(err);\n        }\n        if (!data.date) {\n            IterateObject(stats.commits, function (todayObj) {\n                delete todayObj[data.hash];\n            });\n        } else {\n            var commits = stats.commits,\n                day = data.date.format(DATE_FORMAT),\n                today = commits[day] = Object(commits[day]);\n\n            delete today[data.hash];\n        }\n\n        if (data.save === false) {\n            callback(null, stats);\n        } else {\n            self.save(stats, callback);\n        }\n\n        return stats;\n    }\n\n    // Check if we have input data\n    if (data._data) {\n        return modify(null, data._data);\n    } else {\n        // Get stats\n        self.get(modify);\n    }\n\n    return self;\n};\n\n/**\n * get\n * Gets the git stats.\n *\n * @name get\n * @function\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.get = function (callback) {\n    var self = this;\n    ReadJson(self.path, function (err, data) {\n\n        if (err && err.code === \"ENOENT\") {\n            return self.save(DEFAULT_DATA, function (err) {\n                callback(err, DEFAULT_DATA);\n            });\n        }\n\n        if (err) {\n            return callback(err);\n        }\n        callback(null, data);\n    });\n    return self;\n};\n\n/**\n * save\n * Saves the provided stats.\n *\n * @name save\n * @function\n * @param {Object} stats The stats to be saved.\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.save = function (stats, callback) {\n    WriteJson(this.path, stats, callback);\n    return this;\n};\n\n/**\n * iterateDays\n * Iterate through the days, calling the callback function on each day.\n *\n * @name iterateDays\n * @function\n * @param {Object} data An object containing the following fields:\n *\n *  - `start` (Moment): A `Moment` date object representing the start date (default: *an year ago*).\n *  - `end` (Moment): A `Moment` date object representing the end date (default: *now*).\n *  - `format` (String): The format of the date (default: `\"MMM D, YYYY\"`).\n *\n * @param {Function} callback The callback function called with the current day formatted (type: string) and the `Moment` date object.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.iterateDays = function (data, callback) {\n\n    if (typeof data === \"function\") {\n        callback = data;\n        data = undefined;\n    }\n\n    // Merge the defaults\n    data.end = data.end || Moment();\n    data.start = data.start || Moment().subtract(1, \"years\");\n    data.format = data.format || DATE_FORMAT;\n\n    var start = new Moment(data.start.format(DATE_FORMAT), DATE_FORMAT),\n        end = new Moment(data.end.format(DATE_FORMAT), DATE_FORMAT),\n        tomrrow = Moment(end.format(DATE_FORMAT), DATE_FORMAT).add(1, \"days\"),\n        endStr = tomrrow.format(DATE_FORMAT),\n        cDay = null;\n\n    while (start.format(DATE_FORMAT) !== endStr) {\n        cDay = start.format(data.format);\n        callback(cDay, start);\n        start.add(1, \"days\");\n    }\n\n    return this;\n};\n\n/**\n * graph\n * Creates an object with the stats on the provided period (default: *last year*).\n *\n * @name graph\n * @function\n * @param {Object} data The object passed to the `iterateDays` method.\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.graph = function (data, callback) {\n\n    if (typeof data === \"function\") {\n        callback = data;\n        data = undefined;\n    }\n\n    var self = this;\n\n    // Get commits\n    self.get(function (err, stats) {\n        if (err) {\n            return callback(err);\n        }\n\n        var cDayObj = null,\n            year = {};\n\n        // Iterate days\n        self.iterateDays(data, function (cDay) {\n            cDayObj = Object(stats.commits[cDay]);\n            cDayObj = year[cDay] = {\n                _: cDayObj,\n                c: Object.keys(cDayObj).length\n            };\n        });\n\n        callback(null, year);\n    });\n\n    return self;\n};\n\n/**\n * calendar\n * Creates the calendar data for the provided period (default: *last year*).\n *\n * @name calendar\n * @function\n * @param {Object} data The object passed to the `graph` method.\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.calendar = function (data, callback) {\n\n    var self = this;\n\n    self.graph(data, function (err, graph) {\n        if (err) {\n            return callback(err);\n        }\n\n        var cal = { total: 0, days: {}, cStreak: 0, lStreak: 0, max: 0 },\n            cDay = null,\n            days = Object.keys(graph),\n            levels = null,\n            cLevel = 0;\n\n        days.forEach(function (c) {\n            cDay = graph[c];\n            cal.total += cDay.c;\n            if (cDay.c > cal.max) {\n                cal.max = cDay.c;\n            }\n\n            if (cDay.c > 0) {\n                if (++cal.cStreak > cal.lStreak) {\n                    cal.lStreak = cal.cStreak;\n                }\n            } else {\n                cal.cStreak = 0;\n            }\n        });\n\n        levels = cal.max / (LEVELS.length * 2);\n        days.forEach(function (c) {\n            cDay = graph[c];\n            cal.days[c] = {\n                c: cDay.c,\n                level: !levels ? 0 : (cLevel = Math.round(cDay.c / levels)) >= 4 ? 4 : !cLevel && cDay.c > 0 ? 1 : cLevel\n            };\n        });\n\n        callback(null, cal);\n    });\n    return self;\n};\n\n/**\n * ansiCalendar\n * Creates the ANSI contributions calendar.\n *\n * @name ansiCalendar\n * @function\n * @param {Object} options The object passed to the `calendar` method.\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.ansiCalendar = function (options, callback) {\n\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n\n    var self = this;\n\n    self.graph(options, function (err, graph) {\n        var cal = [],\n            data = {\n            theme: options.theme,\n            start: options.start,\n            end: options.end,\n            firstDay: options.firstDay,\n            cal: cal,\n            raw: options.raw\n        };\n\n        self.iterateDays(options, function (cDay) {\n            var cDayObj = graph[cDay];\n            if (!cDayObj) {\n                return;\n            }\n            cal.push([cDay, cDayObj.c]);\n        });\n\n        callback(null, CliGhCal(cal, data));\n    });\n\n    return self;\n};\n\n/**\n * authors\n * Creates an array with the authors of a git repository.\n *\n * @name authors\n * @function\n * @param {String|Object} options The repo path or an object containing the following fields:\n *\n *  - `repo` (String): The repository path.\n *\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.authors = function (options, callback) {\n    var repo = new Gry(options.repo);\n    repo.exec(\"shortlog -s -n --all --since \\\"\" + options.start.toString() + \"\\\" --until \\\"\" + options.end.toString() + \"\\\"\", function (err, stdout) {\n        if (err) {\n            return callback(err);\n        }\n        var lines = stdout.split(\"\\n\");\n        var pieData = stdout.split(\"\\n\").map(function (c) {\n            var splits = c.split(\"\\t\").map(function (cc) {\n                return cc.trim();\n            });\n            return {\n                value: parseInt(splits[0]),\n                label: splits[1]\n            };\n        });\n        callback(null, pieData);\n    });\n    return this;\n};\n\n/**\n * authorsPie\n * Creates the authors pie.\n *\n * @name authorsPie\n * @function\n * @param {String|Object} options The repo path or an object containing the following fields:\n *\n *  - `repo` (String): The repository path.\n *  - `radius` (Number): The pie radius.\n *  - `no_ansi` (Boolean): If `true`, the pie will not contain ansi characters.\n *  - `raw` (Boolean): If `true`, the raw JSON will be displayed.\n *\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.authorsPie = function (options, callback) {\n\n    if (typeof options === \"string\") {\n        options = {\n            repo: options\n        };\n    }\n\n    options = Ul.merge(options, {\n        radius: process.stdout.rows / 2 || 20\n    });\n\n    if (!IsThere(options.repo)) {\n        return callback(new Error(\"The repository folder doesn't exist.\"));\n    }\n\n    var self = this,\n        repo = new Gry(options.repo),\n        pie = null,\n        pieData = [];\n\n    self.authors(options, function (err, authors) {\n        if (err) {\n            return callback(err);\n        }\n        if (authors.length > 50) {\n            var others = {\n                value: authors.slice(50).reduce(function (a, b) {\n                    return a + b.value;\n                }, 0),\n                label: \"Others\"\n            };\n            authors = authors.slice(0, 50);\n            authors.push(others);\n        }\n\n        var data = {\n            legend: true,\n            flat: true,\n            no_ansi: options.no_ansi,\n            authors: authors\n        };\n\n        callback(null, options.raw ? data : new CliPie(options.radius, authors, data).toString());\n    });\n\n    return self;\n};\n\n/**\n * globalActivity\n * Creates the global contributions calendar (all commits made by all committers).\n *\n * @name globalActivity\n * @function\n * @param {String|Object} options The repo path or an object containing the following fields:\n *\n *  - `repo` (String): The repository path.\n *  - `start` (String): The start date.\n *  - `end` (String): The end date.\n *  - `theme` (String|Object): The calendar theme.\n *  - `raw` (Boolean): If `true`, the raw JSON will be displayed.\n *\n * @param {Function} callback The callback function.\n * @return {GitStats} The `GitStats` instance.\n */\nGitStats.prototype.globalActivity = function (options, callback) {\n\n    if (typeof options === \"string\") {\n        options = {\n            repo: options\n        };\n    }\n\n    options.repo = Abs(options.repo);\n\n    if (!IsThere(options.repo)) {\n        return callback(new Error(\"The repository folder doesn't exist.\"));\n    }\n\n    var commits = {},\n        today = null,\n        cal = [];\n\n    GitLogParser(Spawn(\"git\", [\"log\", \"--since\", options.start.format(DATE_FORMAT), \"--until\", options.end.format(DATE_FORMAT)], { cwd: options.repo }).stdout).on(\"commit\", function (commit) {\n        if (!commit) {\n            return;\n        }\n        today = Moment(commit.date).format(DATE_FORMAT);\n        commits[today] = commits[today] || 0;\n        ++commits[today];\n    }).on(\"error\", function (err) {\n        callback(err);\n    }).on(\"finish\", function () {\n        Object.keys(commits).forEach(function (c) {\n            cal.push([c, commits[c]]);\n        });\n        var data = {\n            theme: options.theme,\n            start: options.start,\n            end: options.end,\n            cal: cal,\n            raw: options.raw\n        };\n        callback(null, CliGhCal(cal, data));\n    });\n\n    return this;\n};\n\nmodule.exports = GitStats;","/home/travis/build/npmtest/node-npmtest-git-stats/node_modules/git-stats-colors/lib/index.js":"\"use strict\";\n\nvar Couleurs = require(\"couleurs\");\n\n// Constants\nvar THEMES = {\n    DARK: {\n        background: \"#111111\",\n        foreground: \"#565656\",\n        levels: [\"#343434\", \"#2e643d\", \"#589f43\", \"#98bc21\", \"#b9fc04\"]\n    },\n    LIGHT: {\n        background: \"#ffffff\",\n        foreground: \"#565656\",\n        levels: [\"#C2C2C2\", \"#b9edcd\", \"#009139\", \"#15763b\", \"#096a2f\"]\n    }\n};\n\nvar SQUARES = [\"⬚\", \"▢\", \"▤\", \"▣\", \"◼\"];\n\n/**\n * GitStatsColors\n * Adds colors to the git-stats inputs.\n *\n * If called with one argument, the raw theme object will be returned.\n *\n * @name GitStatsColors\n * @function\n * @param {String} input The input string.\n * @param {String|Object} thm The theme object or name.\n * @return {String} The colored result.\n */\nmodule.exports = function GitStatsColors(input, thm) {\n\n    if (arguments.length === 1) {\n        thm = input || \"DARK\";\n        var ex = THEMES[thm];\n        return ex || (typeof thm === \"string\" ? THEMES.DARK : thm);\n    }\n\n    thm = thm || \"DARK\";\n\n    var theme = thm && thm.constructor === Object ? thm : THEMES[thm];\n\n    // Padding right\n    input = input.replace(/╝|╗/gm, \"═$&\");\n    input = input.replace(/║$/gm, \" $&\");\n    input = input.split(\"\");\n\n    // Add colors\n    for (var i = 0; i < input.length; ++i) {\n        var c = input[i],\n            level = SQUARES.indexOf(c);\n\n        if (level !== -1) {\n            input[i] = Couleurs(\"◼\", theme.levels[level]);\n        } else if (/^(╔|═|╗|║|╝|═|╚|║|\\-|\\–|\\,|\\:|\\||[a-z]|[0-9])$/i.test(c)) {\n            input[i] = Couleurs(c, theme.foreground);\n        }\n    }\n\n    // Add background\n    input = input.join(\"\").split(\"\\n\").map(function (c) {\n        return Couleurs.bg(c, theme.background);\n    });\n\n    input = input.join(\"\\n\");\n    return input;\n};","/home/travis/build/npmtest/node-npmtest-git-stats/node_modules/git-stats/scripts/migration/2.0.0.js":"#!/usr/bin/env node\n\"use strict\";\n\n// Dependencies\nvar ReadJson = require(\"r-json\"),\n    WriteJson = require(\"w-json\"),\n    Abs = require(\"abs\"),\n    Logger = require(\"bug-killer\");\n\n// Constants\nvar DATA_FILE = Abs(\"~/.git-stats\");\n\nfunction migrate() {\n    var data = {};\n\n    try {\n        data = ReadJson(DATA_FILE);\n    } catch (e) {\n        if (e.code === \"ENOENT\") {\n            return;\n        }\n        Logger.log(e);\n    }\n\n    data.commits = data.commits || {};\n    var newStats = { commits: data.commits };\n    delete data.commits;\n    Object.keys(data).forEach(function (day) {\n        var cDay = newStats.commits[day] = newStats.commits[day] || {};\n        Object.keys(data[day]).map(function (c) {\n            Object.keys(data[day][c]).map(function (h) {\n                cDay[h] = 1;\n            });\n        });\n    });\n\n    WriteJson(DATA_FILE, newStats);\n}\n\nmigrate();"}